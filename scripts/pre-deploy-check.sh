#!/bin/bash

echo "üîç Validation pr√©-d√©ploiement BYW..."

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

ERRORS=0
WARNINGS=0

# Fonction pour afficher les messages
check_pass() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

check_fail() {
    echo -e "${RED}‚ùå $1${NC}"
    ((ERRORS++))
}

check_warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# 1. V√©rifier la structure des fichiers
info "V√©rification de la structure des fichiers..."

if [ -f "package.json" ]; then
    check_pass "package.json trouv√©"
else
    check_fail "package.json manquant"
fi

if [ -f "vite.config.ts" ]; then
    check_pass "Configuration Vite trouv√©e"
else
    check_fail "vite.config.ts manquant"
fi

if [ -f "tsconfig.json" ]; then
    check_pass "Configuration TypeScript trouv√©e"
else
    check_fail "tsconfig.json manquant"
fi

if [ -f "tailwind.config.js" ]; then
    check_pass "Configuration Tailwind trouv√©e"
else
    check_fail "tailwind.config.js manquant"
fi

# 2. V√©rifier les variables d'environnement
info "V√©rification des variables d'environnement..."

if [ -f ".env" ]; then
    check_pass "Fichier .env trouv√©"
    
    # V√©rifier les variables critiques
    if grep -q "VITE_SUPABASE_URL" .env; then
        check_pass "VITE_SUPABASE_URL configur√©"
    else
        check_fail "VITE_SUPABASE_URL manquant"
    fi
    
    if grep -q "VITE_SUPABASE_ANON_KEY" .env; then
        check_pass "VITE_SUPABASE_ANON_KEY configur√©"
    else
        check_fail "VITE_SUPABASE_ANON_KEY manquant"
    fi
    
    if grep -q "VITE_STRIPE_PUBLISHABLE_KEY" .env; then
        check_pass "VITE_STRIPE_PUBLISHABLE_KEY configur√©"
    else
        check_warn "VITE_STRIPE_PUBLISHABLE_KEY manquant (optionnel)"
    fi
else
    check_fail "Fichier .env manquant"
fi

# 3. V√©rifier les d√©pendances
info "V√©rification des d√©pendances..."

if [ -d "node_modules" ]; then
    check_pass "node_modules trouv√©"
    
    # V√©rifier les packages critiques
    if [ -d "node_modules/react" ]; then
        check_pass "React install√©"
    else
        check_fail "React manquant"
    fi
    
    if [ -d "node_modules/vite" ]; then
        check_pass "Vite install√©"
    else
        check_fail "Vite manquant"
    fi
    
    if [ -d "node_modules/typescript" ]; then
        check_pass "TypeScript install√©"
    else
        check_fail "TypeScript manquant"
    fi
else
    check_fail "node_modules manquant - Ex√©cutez 'npm install'"
fi

# 4. V√©rifier la structure du code source
info "V√©rification de la structure du code source..."

if [ -d "src" ]; then
    check_pass "Dossier src trouv√©"
    
    if [ -f "src/main.tsx" ]; then
        check_pass "Point d'entr√©e src/main.tsx trouv√©"
    else
        check_fail "src/main.tsx manquant"
    fi
    
    if [ -f "src/App.tsx" ]; then
        check_pass "Composant principal src/App.tsx trouv√©"
    else
        check_fail "src/App.tsx manquant"
    fi
    
    if [ -d "src/components" ]; then
        check_pass "Dossier components trouv√©"
    else
        check_fail "Dossier src/components manquant"
    fi
    
    if [ -d "src/services" ]; then
        check_pass "Dossier services trouv√©"
    else
        check_warn "Dossier src/services manquant"
    fi
else
    check_fail "Dossier src manquant"
fi

# 5. V√©rifier le build
info "V√©rification du build..."

if [ -d "dist" ]; then
    check_pass "Build existant trouv√©"
    
    if [ -f "dist/index.html" ]; then
        check_pass "index.html g√©n√©r√©"
    else
        check_fail "index.html manquant dans le build"
    fi
    
    # V√©rifier la taille du build
    BUILD_SIZE=$(du -s dist 2>/dev/null | cut -f1)
    if [ "$BUILD_SIZE" -gt 0 ]; then
        check_pass "Build non vide (${BUILD_SIZE}KB)"
        
        if [ "$BUILD_SIZE" -gt 51200 ]; then  # 50MB
            check_warn "Build volumineux (${BUILD_SIZE}KB) - Consid√©rer l'optimisation"
        fi
    else
        check_fail "Build vide"
    fi
else
    check_warn "Aucun build trouv√© - Ex√©cutez 'npm run build'"
fi

# 6. V√©rifications de s√©curit√©
info "V√©rifications de s√©curit√©..."

# V√©rifier les secrets dans le code (exclure les placeholders)
if grep -r "sk_live_[a-zA-Z0-9]" src/ 2>/dev/null | grep -v "placeholder\|exemple\|example"; then
    check_fail "Cl√© secr√®te Stripe d√©tect√©e dans le code source"
else
    check_pass "Aucune cl√© secr√®te d√©tect√©e"
fi

# V√©rifier les console.log en production
if grep -r "console.log" src/ 2>/dev/null | grep -v "// TODO\|// DEBUG" | head -1 >/dev/null; then
    check_warn "console.log d√©tect√©s dans le code source"
else
    check_pass "Aucun console.log d√©tect√©"
fi

# V√©rifier les TODO/FIXME
TODO_COUNT=$(grep -r "TODO\|FIXME" src/ 2>/dev/null | wc -l)
if [ "$TODO_COUNT" -gt 0 ]; then
    check_warn "$TODO_COUNT TODO/FIXME trouv√©s dans le code"
else
    check_pass "Aucun TODO/FIXME en attente"
fi

# 7. V√©rifications de performance
info "V√©rifications de performance..."

# V√©rifier la taille des assets
if [ -d "dist/assets" ]; then
    LARGE_FILES=$(find dist/assets -size +1M 2>/dev/null | wc -l)
    if [ "$LARGE_FILES" -gt 0 ]; then
        check_warn "$LARGE_FILES fichiers > 1MB d√©tect√©s"
    else
        check_pass "Taille des assets optimale"
    fi
fi

# 8. V√©rifications de compatibilit√©
info "V√©rifications de compatibilit√©..."

# V√©rifier la version de Node.js
NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -ge 18 ]; then
    check_pass "Version Node.js compatible ($NODE_VERSION)"
else
    check_warn "Version Node.js ancienne ($NODE_VERSION) - Recommand√©: 18+"
fi

# R√©sum√©
echo ""
echo "üìä R√©sum√© de la validation:"
echo "=========================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}üéâ Parfait! Aucun probl√®me d√©tect√©.${NC}"
    echo -e "${GREEN}‚úÖ Pr√™t pour le d√©ploiement!${NC}"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $WARNINGS avertissement(s) d√©tect√©(s).${NC}"
    echo -e "${YELLOW}üìù V√©rifiez les avertissements avant le d√©ploiement.${NC}"
    exit 0
else
    echo -e "${RED}‚ùå $ERRORS erreur(s) critique(s) d√©tect√©e(s).${NC}"
    echo -e "${RED}üö´ Corrigez les erreurs avant le d√©ploiement.${NC}"
    
    if [ $WARNINGS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $WARNINGS avertissement(s) √©galement d√©tect√©(s).${NC}"
    fi
    
    exit 1
fi
